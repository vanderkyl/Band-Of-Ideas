(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('fast-unique-numbers'), require('standardized-audio-context')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', 'fast-unique-numbers', 'standardized-audio-context'], factory) :
    (global = global || self, factory(global.webAudioBeatDetectorBroker = {}, global._regeneratorRuntime, global._asyncToGenerator, global.fastUniqueNumbers, global.standardizedAudioContext));
}(this, (function (exports, _regeneratorRuntime, _asyncToGenerator, fastUniqueNumbers, standardizedAudioContext) { 'use strict';

    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;

    var render = function render(audioBuffer, offset, duration) {
      var offlineAudioContext = new standardizedAudioContext.OfflineAudioContext(audioBuffer.numberOfChannels, duration * audioBuffer.sampleRate, audioBuffer.sampleRate);
      var biquadFilter = offlineAudioContext.createBiquadFilter();
      var bufferSourceNode = offlineAudioContext.createBufferSource();
      biquadFilter.frequency.value = 240;
      biquadFilter.type = 'lowpass';
      bufferSourceNode.buffer = audioBuffer;
      bufferSourceNode.connect(biquadFilter).connect(offlineAudioContext.destination);
      bufferSourceNode.start(0, offset, duration);
      return offlineAudioContext.startRendering().then(function (renderedBuffer) {
        var channelData = renderedBuffer.getChannelData(0);
        var sampleRate = renderedBuffer.sampleRate;
        return {
          channelData: channelData,
          sampleRate: sampleRate
        };
      });
    };

    var load = function load(url) {
      var worker = new Worker(url);
      var ongoingRecordingRequests = new Set();

      var analyze = function analyze(audioBuffer) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : audioBuffer.duration - offset;
        return new Promise(
        /*#__PURE__*/
        function () {
          var _ref = _asyncToGenerator(
          /*#__PURE__*/
          _regeneratorRuntime.mark(function _callee(resolve, reject) {
            var _ref2, channelData, sampleRate, id, onMessage;

            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return render(audioBuffer, offset, duration);

                  case 2:
                    _ref2 = _context.sent;
                    channelData = _ref2.channelData;
                    sampleRate = _ref2.sampleRate;
                    id = fastUniqueNumbers.addUniqueNumber(ongoingRecordingRequests);

                    onMessage = function onMessage(_ref3) {
                      var data = _ref3.data;

                      if (data.id === id) {
                        ongoingRecordingRequests["delete"](id);
                        worker.removeEventListener('message', onMessage);

                        if (data.error === null) {
                          resolve(data.result.tempo);
                        } else {
                          reject(new Error(data.error.message));
                        }
                      }
                    };

                    worker.addEventListener('message', onMessage);
                    worker.postMessage({
                      id: id,
                      method: 'analyze',
                      params: {
                        channelData: channelData,
                        sampleRate: sampleRate
                      }
                    }, [channelData.buffer]);

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      };

      var guess = function guess(audioBuffer) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : audioBuffer.duration - offset;
        return new Promise(
        /*#__PURE__*/
        function () {
          var _ref4 = _asyncToGenerator(
          /*#__PURE__*/
          _regeneratorRuntime.mark(function _callee2(resolve, reject) {
            var _ref5, channelData, sampleRate, id, onMessage;

            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return render(audioBuffer, offset, duration);

                  case 2:
                    _ref5 = _context2.sent;
                    channelData = _ref5.channelData;
                    sampleRate = _ref5.sampleRate;
                    id = fastUniqueNumbers.addUniqueNumber(ongoingRecordingRequests);

                    onMessage = function onMessage(_ref6) {
                      var data = _ref6.data;

                      if (data.id === id) {
                        ongoingRecordingRequests["delete"](id);
                        worker.removeEventListener('message', onMessage);

                        if (data.error === null) {
                          resolve(data.result);
                        } else {
                          reject(new Error(data.error.message));
                        }
                      }
                    };

                    worker.addEventListener('message', onMessage);
                    worker.postMessage({
                      id: id,
                      method: 'guess',
                      params: {
                        channelData: channelData,
                        sampleRate: sampleRate
                      }
                    }, [channelData.buffer]);

                  case 9:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          return function (_x3, _x4) {
            return _ref4.apply(this, arguments);
          };
        }());
      };

      return {
        analyze: analyze,
        guess: guess
      };
    };

    Object.defineProperty(exports, 'isSupported', {
        enumerable: true,
        get: function () {
            return standardizedAudioContext.isSupported;
        }
    });
    exports.load = load;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
